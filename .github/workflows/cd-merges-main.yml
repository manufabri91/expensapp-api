name: Build and Push Docker Image (Development)

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "PROFILE=dev" >> .env
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" >> .env
          echo "DECRYPT_KEY=${{ secrets.DECRYPT_KEY }}" >> .env

      - name: Set up git credentials
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

      - name: Determine release version
        id: get_version
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ -n "$GITHUB_HEAD_REF" ]; then
            BRANCH_NAME="$GITHUB_HEAD_REF"
          fi
          BRANCH_NAME_LC=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]')
          if [[ $BRANCH_NAME_LC =~ ^(fix|bugfix|hotfix)[/\-] ]]; then
            LAST_TAG=$(git tag --sort=-v:refname | grep -E '^([0-9]+\.[0-9]+\.[0-9]+)$' | head -n1)
            MAJOR=$(echo $LAST_TAG | cut -d. -f1)
            MINOR=$(echo $LAST_TAG | cut -d. -f2)
            PATCH=$(echo $LAST_TAG | cut -d. -f3)
            NEW_PATCH=$((PATCH+1))
            VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            VERSION_NO_SNAPSHOT=${VERSION/-SNAPSHOT/}
            echo "version=$VERSION_NO_SNAPSHOT" >> $GITHUB_OUTPUT
          fi

      - name: Create git tag for release version
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          git tag $VERSION
          git push origin $VERSION

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/expensapp-api:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/expensapp-api:${{ steps.get_version.outputs.version }}
          build-args: |
            PROFILE=dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    container: ghcr.io/railwayapp/cli:latest
    env:
      SVC_ID: expensapp-api
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - run: railway redeploy -y --service=${{ env.SVC_ID }}

  version:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Bump version in pom.xml to next -SNAPSHOT
        if: github.ref == 'refs/heads/main' && !startsWith(github.head_ref, 'fix') && !startsWith(github.head_ref, 'bugfix') && !startsWith(github.head_ref, 'hotfix')
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          VERSION_NO_SNAPSHOT=${VERSION/-SNAPSHOT/}
          MAJOR=$(echo $VERSION_NO_SNAPSHOT | cut -d. -f1)
          MINOR=$(echo $VERSION_NO_SNAPSHOT | cut -d. -f2)
          NEW_MINOR=$((MINOR+1))
          NEW_VERSION="$MAJOR.$NEW_MINOR.0-SNAPSHOT"
          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit

      - name: Commit and push bumped version
        if: github.ref == 'refs/heads/main' && !startsWith(github.head_ref, 'fix') && !startsWith(github.head_ref, 'bugfix') && !startsWith(github.head_ref, 'hotfix')
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add pom.xml
          git commit -m "Bump version after release [skip ci]" || echo "No changes to commit"
          git push
